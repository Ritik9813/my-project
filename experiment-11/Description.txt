PLAYING CARDS API (Express.js) FUNCTIONALITY & FLOW OVERVIEW

1. FEATURE: RESTful API for Playing Cards

The program provides a simple RESTful API to manage a collection of playing cards. 
Users can view, add, and delete cards through different HTTP routes.

2. APPLICATION STRUCTURE (Node.js + Express Overview)

The application is structured around:
- Express framework: Handles routing and server functionality.
- Middleware: express.json() parses incoming JSON request bodies.
- cards array: In-memory collection of card objects (id, suit, value).

Defined routes:
- GET '/' → Displays a welcome message.
- GET '/cards' → Returns all cards in JSON format.
- GET '/cards/:id' → Returns a single card by ID.
- POST '/cards' → Adds a new card (requires suit and value in JSON body).
- DELETE '/cards/:id' → Deletes a card by ID.

3. PROGRAM FLOW (Step-by-Step)

Start: Server runs on http://localhost:3000.
User Actions:
- Access '/' → See welcome message.
- Access '/cards' → Get the full list of cards.
- Access '/cards/:id' → Fetch details of a single card by ID.
- POST to '/cards' → Add a new card with JSON input.
- DELETE '/cards/:id' → Remove a card by ID.

Loop: The server continues running, listening for requests until stopped manually.

4. DATA STRUCTURE

Cards are stored in an array of objects:

[
  { id: 1, suit: "Hearts", value: "Ace" },
  { id: 2, suit: "Spades", value: "King" },
  { id: 3, suit: "Diamonds", value: "Queen" }
]

This simple in-memory structure allows CRUD operations but resets when the server restarts.

5. USER EXPERIENCE (API Interaction)

- Accessible via browser or API tools like Postman / curl.
- JSON-based responses for easy integration.
- Clear HTTP status codes (201 for created, 404 for not found).

6. LIMITATIONS

- Data is stored only in memory (no persistence).
- ID auto-increments based on array length, which may cause duplicates if items are deleted and re-added.
- No validation for duplicate cards or missing fields.

LEARNING OUTCOMES

- How to build a REST API with Express.js.
- How to use middleware for JSON parsing.
- How to implement CRUD operations using HTTP methods (GET, POST, DELETE).
- How to manage data in memory with JavaScript objects and arrays.
