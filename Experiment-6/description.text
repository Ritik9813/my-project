INTERACTIVE SVG DRAWING TOOL FUNCTIONALITY & STYLING OVERVIEW

1. FEATURE: Mouse-Based Drawing
- The project allows users to draw directly on an SVG canvas using the mouse.
- Users can click and drag to create freehand lines (polylines).
- Multiple shapes can be drawn without refreshing the page.

2. PAGE STRUCTURE (HTML Overview)
- The page has a container box enclosing both the title and the canvas.
- A heading is displayed at the top inside the bordered container.
- The drawing area is implemented using an <svg> element with fixed width and height.

3. CSS LAYOUT & STYLING
- The container has a solid black border and padding to visually group the title and canvas.
- The canvas itself is wrapped with a thin border for clear separation.
- The canvas background is light gray to make drawings stand out.
- The mouse cursor is styled as a crosshair inside the canvas to indicate drawing mode.

Color Scheme:
- Container Background: White
- Outer Border: Black
- Canvas Border: Black
- Canvas Background: Light gray
- Stroke (drawing lines): Blue

4. PAGE VISUAL LAYOUT (Simplified)

+----------------------------------------+
|         SVG DRAWING TOOL               |
+----------------------------------------+
|  +----------------------------------+  |
|  |   [SVG Canvas - Drawing Area]    |  |
|  +----------------------------------+  |
+----------------------------------------+

5. FILE DISTRIBUTION
- index.html → Defines the structure: container, title, and SVG canvas.
- style.css → Styles the container, borders, and canvas background.
- script.js → Implements drawing functionality with mouse events.

6. JAVASCRIPT INTERACTIVITY

Event Listeners
- mousedown: Starts a new line and records the starting point.
- mousemove: Continuously appends new points to the polyline as the mouse moves.
- mouseup: Ends the current drawing action.
- mouseleave: Cancels drawing if the mouse leaves the canvas.

DOM Selection
- The canvas is selected using getElementById("canvas").
- New shapes are created dynamically using document.createElementNS() for SVG.

Mouse Position Calculation
- Mouse coordinates are converted relative to the SVG using getBoundingClientRect().
- This ensures accurate drawing regardless of page layout.

Data Updates
- Each line’s path is updated by appending the current mouse position to the points attribute of the <polyline>.

JavaScript Concepts Used
- Event handling (mousedown, mousemove, mouseup, mouseleave)
- DOM manipulation (createElementNS, setAttribute)
- SVG element handling (polyline, points)
- Coordinate calculation (clientX, clientY, getBoundingClientRect)
- State management with variables (drawing, currentLine)

7. LEARNING OUTCOMES
- Understand how to build an interactive drawing tool with SVG.
- Practice advanced DOM manipulation for SVG element creation.
- Learn real-time updates of attributes during mouse movement.
- Apply multiple JavaScript concepts: event handling, coordinate math, and state control.
- Gain experience in separating concerns with HTML (structure), CSS (styling), and JavaScript (logic).
