
STUDENT REGISTRATION FORM: FUNCTIONALITY & STYLING OVERVIEW

1. FEATURE: User Input Form
The form collects basic information from students including name, email, and age. There are two identical forms on the page, both using the POST method to submit to the /submit endpoint.

2. FORM STRUCTURE (HTML Overview)
Each form contains:
- A heading labeled "Student Registration Form"
- Name field: Text input with min length 3 and max length 21, required
- Email field: Input type email, required
- Age field: Input type number, must be between 10 and 100, required
- Submit button

3. VALIDATION
HTML5 built-in validations ensure:
- Name cannot be empty and must meet length constraints
- Email must follow standard email format
- Age must be between 10 and 100
The form will not submit until all fields pass validation.

4. CSS STYLING BREAKDOWN

ELEMENT: body
Purpose: Sets the base page styling
- background-color: antiquewhite; → Applies a soft beige background
- flex-direction, justify-content: These properties are ineffective unless the body is set to display: flex (not present)

ELEMENT: h2 (Form Heading)
Purpose: Styles the form title
- text-align: center; → Centers the heading
- color: #2c3e50; → Dark blue-gray tone
- margin-top: 30px; → Adds space above the heading

ELEMENT: form (Form Container)
Purpose: Styles the form box and layout
- background-color: rgb(85, 176, 176); → Aqua-green background
- margin: 160px; → Adds spacing around the form (overwrites earlier invalid margin)
- padding: 50px; → Adds internal spacing
- max-width: 300px; → Restricts the width for better readability
- height: 250px; → Fixed height of the form
- border: 30px ridge red; → Thick red ridged border
- border-radius: 10px; → Rounded corners for a smooth look
- display: flex; flex-direction: column; → Aligns inputs vertically

NOTE:
- The form includes some invalid/inconsistent CSS such as multiple padding/margin declarations and incorrect comma syntax, but only the last declarations take effect.

LEARNING OUTCOMES
- Creating a student input form with built-in HTML validations
- Using semantic HTML5 input types
- Styling a form using CSS with flex layout and visual enhancements
